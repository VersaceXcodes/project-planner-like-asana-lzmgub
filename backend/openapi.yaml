openapi: 3.0.0
info:
  title: ProjectPlanner API
  version: 1.0.0
  description: >
    This is the comprehensive, production-ready API for the ProjectPlanner MVP.

    It covers user registration, authentication, project and task management,
    collaboration,

    notifications, and real-time updates via websockets.
servers:
  - url: http://localhost:1337
paths:
  /api/users:
    post:
      operationId: create_user
      summary: Create a new user account (registration)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
        "400":
          description: Invalid input or duplicate email.
  /api/auth/login:
    post:
      operationId: login_user
      summary: Authenticate a user and return a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful. Returns authentication token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Unauthorized - invalid credentials.
  /api/projects:
    post:
      operationId: create_project
      summary: Create a new project (requires authentication)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: Project created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          description: Invalid input.
  /api/tasks/{task_uid}/status:
    patch:
      operationId: update_task_status
      summary: Update the status of a task (e.g., via drag-and-drop)
      security:
        - BearerAuth: []
      parameters:
        - name: task_uid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTaskStatusRequest"
      responses:
        "200":
          description: Task status updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Invalid input or task not found.
  /api/tasks/{task_uid}/comments:
    post:
      operationId: add_comment_to_task
      summary: Add a comment to a task (supports @-mentions)
      security:
        - BearerAuth: []
      parameters:
        - name: task_uid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCommentRequest"
      responses:
        "201":
          description: Comment added successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Invalid input or task not found.
  /api/notifications:
    get:
      operationId: get_notifications
      summary: Retrieve all notifications for the authenticated user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Return an array of notification objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Invalid request.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      required:
        - uid
        - name
        - email
        - role
        - created_at
        - updated_at
      properties:
        uid:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
        avatar_url:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        avatar_url:
          type: string
    CreateUserResponse:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            token:
              type: string
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      required:
        - token
        - uid
        - role
      properties:
        token:
          type: string
        uid:
          type: string
        role:
          type: string
    Project:
      type: object
      required:
        - uid
        - title
        - description
        - due_date
        - priority
        - status
        - created_by
        - created_at
        - updated_at
      properties:
        uid:
          type: string
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
        priority:
          type: string
        status:
          type: string
        milestones:
          type: object
        created_by:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    CreateProjectRequest:
      type: object
      required:
        - title
        - description
        - due_date
        - priority
      properties:
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
        priority:
          type: string
        milestones:
          type: object
    Task:
      type: object
      required:
        - uid
        - project_uid
        - title
        - description
        - due_date
        - priority
        - status
        - created_by
        - created_at
        - updated_at
      properties:
        uid:
          type: string
        project_uid:
          type: string
        parent_task_uid:
          type: string
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
        priority:
          type: string
        status:
          type: string
        recurrence:
          type: object
        created_by:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    UpdateTaskStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
    AddCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
        mentions:
          type: array
          items:
            type: string
    Comment:
      type: object
      required:
        - uid
        - task_uid
        - user_uid
        - content
        - created_at
      properties:
        uid:
          type: string
        task_uid:
          type: string
        user_uid:
          type: string
        content:
          type: string
        created_at:
          type: string
        mentions:
          type: array
          items:
            type: string
    Notification:
      type: object
      required:
        - uid
        - user_uid
        - notification_type
        - content
        - is_read
        - created_at
      properties:
        uid:
          type: string
        user_uid:
          type: string
        notification_type:
          type: string
        content:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
x-websocket:
  description: |
    The following websocket events are supported for real-time updates.
    These events are emitted on authenticated websocket connections.
  events:
    task_status_updated:
      summary: Emitted when a task's status is updated.
      payload:
        type: object
        required:
          - task_uid
          - status
          - updated_at
        properties:
          task_uid:
            type: string
          status:
            type: string
          updated_at:
            type: string
    new_comment_added:
      summary: Emitted when a new comment is added to a task.
      payload:
        type: object
        required:
          - comment_uid
          - task_uid
          - user_uid
          - content
          - created_at
        properties:
          comment_uid:
            type: string
          task_uid:
            type: string
          user_uid:
            type: string
          content:
            type: string
          created_at:
            type: string
    notification_created:
      summary: Emitted when a new notification is generated.
      payload:
        type: object
        required:
          - uid
          - user_uid
          - notification_type
          - content
          - is_read
          - created_at
        properties:
          uid:
            type: string
          user_uid:
            type: string
          notification_type:
            type: string
          content:
            type: string
          is_read:
            type: boolean
          created_at:
            type: string
